name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]

env:
  DJANGO_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/staging' && 'staging' || 'development' }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.11]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements/*.txt') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r findempro/requirements/development.txt
    
    - name: Run tests
      env:
        DJANGO_ENV: test
        DB_NAME: test_db
        DB_USER: root
        DB_PASSWORD: root
        DB_HOST: 127.0.0.1
        SECRET_KEY: test-secret-key
      run: |
        pytest --cov=. --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Staging
      env:
        STAGING_HOST: ${{ secrets.STAGING_HOST }}
        STAGING_USER: ${{ secrets.STAGING_USER }}
        STAGING_KEY: ${{ secrets.STAGING_SSH_KEY }}
      run: |
        echo "$STAGING_KEY" > staging_key
        chmod 600 staging_key
        ssh -i staging_key -o StrictHostKeyChecking=no $STAGING_USER@$STAGING_HOST '
          cd /var/www/findempro-staging
          git pull origin staging
          docker-compose -f docker-compose.staging.yml down
          docker-compose -f docker-compose.staging.yml up -d --build
          docker-compose -f docker-compose.staging.yml exec -T app python manage.py migrate
          docker-compose -f docker-compose.staging.yml exec -T app python manage.py collectstatic --noinput
        '

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Production
      env:
        PROD_HOST: ${{ secrets.PROD_HOST }}
        PROD_USER: ${{ secrets.PROD_USER }}
        PROD_KEY: ${{ secrets.PROD_SSH_KEY }}
      run: |
        echo "$PROD_KEY" > prod_key
        chmod 600 prod_key
        ssh -i prod_key -o StrictHostKeyChecking=no $PROD_USER@$PROD_HOST '
          cd /var/www/findempro
          ./scripts/deploy.sh
        '