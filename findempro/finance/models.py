from typing import Optional
from django.db import models
from simulate.models import DemandSimulation  # Make sure the import statement is correct.

# Create your models here.

class FinancialDecision(models.Model):
    decision_date = models.DateField()
    quantity_to_produce = models.PositiveIntegerField()
    revenue = models.DecimalField(max_digits=10, decimal_places=2)
    cost = models.DecimalField(max_digits=10, decimal_places=2)
    is_active = models.BooleanField(default=True)
    simulation = models.ForeignKey(DemandSimulation, on_delete=models.CASCADE)

    def __str__(self) -> str:
        """
        Returns a string representation of the financial decision, including the name of the product associated with
        the demand simulation and the decision date.
        """
        return f"Decision for {self.simulation.product.name} on {self.decision_date}"

    def create_decision(self, decision_date: str, quantity_to_produce: int, revenue: float, cost: float,
                        is_active: Optional[bool] = True) -> None:
        """
        Creates a new financial decision with the given parameters and saves it to the database.
        :param decision_date: The date of the financial decision.
        :param quantity_to_produce: The quantity to produce for the decision.
        :param revenue: The revenue generated by the decision.
        :param cost: The cost associated with the decision.
        :param is_active: Whether the decision is active or not (default is True).
        """
        self.decision_date = decision_date
        self.quantity_to_produce = quantity_to_produce
        self.revenue = revenue
        self.cost = cost
        self.is_active = is_active
        self.save()

    def update_decision(self, quantity_to_produce: int) -> None:
        """
        Updates the quantity to produce for the financial decision and saves the changes to the database.
        :param quantity_to_produce: The new quantity to produce for the decision.
        """
        self.quantity_to_produce = quantity_to_produce
        self.save()

    def delete_decision(self) -> None:
        """
        Deletes the financial decision from the database.
        """
        self.delete()
    
        

